<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EMAIL_ALREADY_REGISTER" xml:space="preserve">
    <value>Email already registered</value>
  </data>
  <data name="EMAIL_EMPTY" xml:space="preserve">
    <value>Email cannot be empty</value>
  </data>
  <data name="EMAIL_INVALID" xml:space="preserve">
    <value>Email is invalid</value>
  </data>
  <data name="EMAIL_OR_PASSWORD_INVALID" xml:space="preserve">
    <value>Email and/or password invalid</value>
  </data>
  <data name="PASSWORD_INVALID" xml:space="preserve">
    <value>Password must be at least 8 characters long, contain at least 1 digit, at least 1 lowercase letter, at least 1 uppercase letter, and at least 1 special character (!*@#$%^&amp;+=)</value>
  </data>
  <data name="NAME_EMPTY" xml:space="preserve">
    <value>Name cannot be empty</value>
  </data>
  <data name="PASSWORD_EMPTY" xml:space="preserve">
    <value>Password cannot be empty</value>
  </data>
  <data name="UNKNOW_ERROR" xml:space="preserve">
    <value>Server error</value>
  </data>
  <data name="NO_TOKEN" xml:space="preserve">
    <value>No token was generated for the user</value>
  </data>
  <data name="USER_WITHOUT_PERMISSION_ACCESS_RESOURCE" xml:space="preserve">
    <value>User without to access resource</value>
  </data>
  <data name="BIRTH_DATE_NOT_ALLOWED" xml:space="preserve">
    <value>Date of birth not allowed for donors turning 69</value>
  </data>
  <data name="GENDER_NOT_SUPPORTED" xml:space="preserve">
    <value>Gender not supported</value>
  </data>
  <data name="WEIGHT_NOT_ALLOWED" xml:space="preserve">
    <value>Weight cannot be less than 50 kg and greater than 140 kg</value>
  </data>
  <data name="BLOOD_TYPE_NOT_SUPPOTED" xml:space="preserve">
    <value>Blood Type not supported</value>
  </data>
  <data name="RH_FACTOR_NOT_SUPPORTED" xml:space="preserve">
    <value>RH Factor not supported</value>
  </data>
  <data name="ADDRESS_STREET_EMPTY" xml:space="preserve">
    <value>In address, street cannot be empty.</value>
  </data>
  <data name="ADDRESS_NUMBER_EMPTY" xml:space="preserve">
    <value>In address, number cannot be empty.</value>
  </data>
  <data name="ADDRESS_CITY_EMPTY" xml:space="preserve">
    <value>In address, city cannot be empty.</value>
  </data>
  <data name="ADDRESS_STATE_EMPTY" xml:space="preserve">
    <value>In address, state cannot be empty.</value>
  </data>
  <data name="ADDRESS_ZIP_EMPTY" xml:space="preserve">
    <value>In address, zip code cannot be empty.</value>
  </data>
  <data name="ADDRESS_COUNTRY_EMPTY" xml:space="preserve">
    <value>In address, country cannot be empty.</value>
  </data>
  <data name="BIRTH_DATE_EMPTY" xml:space="preserve">
    <value>Birth date cannot be empty</value>
  </data>
  <data name="BIRTH_DATE_INVALID" xml:space="preserve">
    <value>Birth date invalid</value>
  </data>
  <data name="DONATION_DATE_EMPTY" xml:space="preserve">
    <value>Donation date cannot be empty</value>
  </data>
  <data name="DONATION_QUANTITY_NOT_ALLOWED" xml:space="preserve">
    <value>The quantity donat must be between 420 and 470 ml</value>
  </data>
  <data name="DONOR_CANNOT_DONATION" xml:space="preserve">
    <value>Donor cannot yet make a donation. Donor is under 18 years old.</value>
  </data>
  <data name="DONATION_NOT_ALLOWED_NEXT_DONATION_DATE" xml:space="preserve">
    <value>The next donation date for the donor must be from</value>
  </data>
  <data name="DONOR_NOT_FOUND" xml:space="preserve">
    <value>Donor not found</value>
  </data>
  <data name="DONATION_DATE_GREATER_CURRENT_DATE" xml:space="preserve">
    <value>The donation date cannot be greater than the current date</value>
  </data>
  <data name="CEP_NOT_FOUND" xml:space="preserve">
    <value>ZIP code not found</value>
  </data>
</root>